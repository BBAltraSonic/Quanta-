// Mocks generated by Mockito 5.4.6 from annotations
// in quanta/test/widgets/enhanced_post_item_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:quanta/services/enhanced_video_service.dart' as _i3;
import 'package:video_player/video_player.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVideoPlayerController_0 extends _i1.SmartFake
    implements _i2.VideoPlayerController {
  _FakeVideoPlayerController_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [EnhancedVideoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnhancedVideoService extends _i1.Mock
    implements _i3.EnhancedVideoService {
  MockEnhancedVideoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onAnalyticsEvent(
    dynamic Function(String, String, Map<String, dynamic>)? _onAnalyticsEvent,
  ) => super.noSuchMethod(
    Invocation.setter(#onAnalyticsEvent, _onAnalyticsEvent),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.VideoPlayerController> getController(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#getController, [videoUrl]),
            returnValue: _i4.Future<_i2.VideoPlayerController>.value(
              _FakeVideoPlayerController_0(
                this,
                Invocation.method(#getController, [videoUrl]),
              ),
            ),
          )
          as _i4.Future<_i2.VideoPlayerController>);

  @override
  _i4.Future<void> preloadVideo(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#preloadVideo, [videoUrl]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> playVideo(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#playVideo, [videoUrl]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> pauseVideo(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#pauseVideo, [videoUrl]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> togglePlayPause(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#togglePlayPause, [videoUrl]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> setVolume(String? videoUrl, double? volume) =>
      (super.noSuchMethod(
            Invocation.method(#setVolume, [videoUrl, volume]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> toggleMute(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#toggleMute, [videoUrl]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> muteAllVideos() =>
      (super.noSuchMethod(
            Invocation.method(#muteAllVideos, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> unmuteAllVideos() =>
      (super.noSuchMethod(
            Invocation.method(#unmuteAllVideos, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> seekTo(String? videoUrl, Duration? position) =>
      (super.noSuchMethod(
            Invocation.method(#seekTo, [videoUrl, position]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> pauseAllVideos() =>
      (super.noSuchMethod(
            Invocation.method(#pauseAllVideos, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void disposeController(String? videoUrl) => super.noSuchMethod(
    Invocation.method(#disposeController, [videoUrl]),
    returnValueForMissingStub: null,
  );

  @override
  void cleanupUnusedControllers(List<String>? activeVideoUrls) =>
      super.noSuchMethod(
        Invocation.method(#cleanupUnusedControllers, [activeVideoUrls]),
        returnValueForMissingStub: null,
      );

  @override
  bool isVideoReady(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#isVideoReady, [videoUrl]),
            returnValue: false,
          )
          as bool);

  @override
  bool isVideoPlaying(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#isVideoPlaying, [videoUrl]),
            returnValue: false,
          )
          as bool);

  @override
  Duration? getVideoDuration(String? videoUrl) =>
      (super.noSuchMethod(Invocation.method(#getVideoDuration, [videoUrl]))
          as Duration?);

  @override
  Duration? getVideoPosition(String? videoUrl) =>
      (super.noSuchMethod(Invocation.method(#getVideoPosition, [videoUrl]))
          as Duration?);

  @override
  _i2.VideoPlayerController? getVideoController(String? videoUrl) =>
      (super.noSuchMethod(Invocation.method(#getVideoController, [videoUrl]))
          as _i2.VideoPlayerController?);

  @override
  double getWatchPercentage(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#getWatchPercentage, [videoUrl]),
            returnValue: 0.0,
          )
          as double);

  @override
  int getTotalWatchTime(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#getTotalWatchTime, [videoUrl]),
            returnValue: 0,
          )
          as int);

  @override
  bool isVideoViewed(String? videoUrl) =>
      (super.noSuchMethod(
            Invocation.method(#isVideoViewed, [videoUrl]),
            returnValue: false,
          )
          as bool);

  @override
  Map<String, dynamic> getCurrentSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentSettings, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
